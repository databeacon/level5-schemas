sourceId: string;
epoch: number; /* this is the sync epoch, i.e., time on which this will be represented on map */
flights: Array<{
    id: string;
    epoch: number; /* refers to FA epoch */
    location: {
        lat: number;
        lng: number;
        alt: number;
    };
    gs: number;
    track: number;
    turnSpeed: number;
    horizontalStatus: 'left' | 'right' | 'cruising';
    flightLevel: number;
    selectedAlt: number;
    selectedFlightLevel: number;
    selectedHeading: number;
    verticalSpeed: number;
    verticalStatus: 'left' | 'right' | 'cruising';
    callsign: string;
    aprtDeparture: string;
    aprtArrival: string;
    isLeaving: boolean;
    leavingEpoch: number;
    synced: {
        /* refers to sync epoch */
        epoch: number; /* should match sync root epoch */
        location: {
            lat: number;
            lng: number;
            alt: number;
        };
        projection: {
            /* location at 60s ahead of sync epoch */
            lat: number;
            lng: number;
            alt: number; /* never used */
        };
    };
    nct: {
        /* refers to our mike5-stream NCTs calculation pipeline */
        id: string;
        flightId: string; /* should match flights[].id */
        sectorId: string;
        anyPcd: boolean;
        isNct: boolean;
        mode: 'acg' | 'soft'
        showHalo: boolean;
        epoch: number; /* refers to mike5-stream calculation epoch */
        projExit: {
            epoch: number;
            location:{
                lat: number;
                lng: number;
                alt: number; /* never calculated */
            }
        },
        synced: {
            /* nothing to sync yet*/
        };
    };
    pcds: Array<{
        /* refers to our mike5-stream PCDs calculation pipeline */
        id: string;
        isFirst: boolean;
        segEpoch: number;
        segDist: number;
        isPcd: boolean;
        epoch: number; /* refers to mike5-stream calculation epoch */
        currentDist: number;
        ownship: {
            id: string;
            location: {
                lat: number; /* flight location.lat when PCD was computed */
                lng: number; /* flight location.lng when PCD was computed*/
                alt: number; /* never calculated */
          };
            cpa: {
                lat: number;
                lng: number;
                alt: number; /* never calculated */
            };
        };
        intruder: {
            id: string;
            location: {
                lat: number;
                lng: number;
                alt: number; /* never calculated */
            };
            cpa: {
                lat: number;
                lng: number;
                alt: number; /* never calculated */
            };
        };
        synced: {
            epoch: number; /* should match syc root epoch */
            currentDist: number;
            ownship: {
                id: string;
                location: { /* should be the same as flights[].location */
                    lat: number;
                    lng: number;
                    alt: number; /* never calculated */
              };
            };
            intruder: {
                id: string;
                location:{
                    lat: string;
                    lng: string;
                    alt: number;
            }
        }
    }         
}
}